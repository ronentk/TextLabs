# milling_device
type md : sa {
    predicates {

    }

    rules {
            grind/s :: $at(P, r) & $at(md, r) & $in(m, I) & solid(m) -> powder(m) & result_mod(m, md);
			grind/p :: $at(P, r) & $at(md, r) & $in(m, I) & powder(m) -> powder(m) & result_mod(m, md);
    }


    inform7 {
        type {
            kind :: "milling_device";
        }

        predicates {

        }

        commands {
            grind/p :: "grind {m} with {md}" :: "grinding the {m}";
			grind/s :: "grind {m} with {md}" :: "grinding the {m}";
        }

        code ::
        """
		Grinding it with is an action applying to one carried thing and one touchable thing.
		Understand "grind [material] with [thing]" as grinding it with.

		Check grinding when the second noun is not a milling_device:
			unless the second noun is a material:
				say "You can only grind [the noun] with a milling_device." instead.

		Check grinding when the noun is liquid:
			say "You can only grind [the noun] if solid or powder." instead.

		[Hack for single argument actions, since by default inform7 assumes the second noun is the first. Also, assuming one device, in the room]
		Check grinding when the second noun is a material:
			let D be a random milling_device;
			unless D is nothing:
				try grinding the noun with D instead;

		Carry out grinding:
			if the noun provides the property state:
				now the noun is powder;
				now the second noun has processed the noun;

		Report grinding:
			say "Ground!"
        """;
    }
}
